#!/usr/bin/env bash

# Ensure this file is executable via `chmod a+x agentlang`, then place it
# somewhere on your $PATH, like ~/bin. The rest of Leiningen will be
# installed upon first run into the ~/.agentlang/self-installs directory.

function msg {
    echo "$@" 1>&2
}

export CURRENT_AGENTLANG_VERSION="0.6.0-alpha3"

if [ -e model.agentlang ]; then
    agentlang_version_in_model=`grep ":agentlang-version" model.agentlang | sed -E  's/(.*) {1}(.*)/\2/' | xargs`
    if [ -z "$agentlang_version_in_model" ] || [ "$agentlang_version_in_model" == "latest" ]; then
	export AGENTLANG_VERSION=${CURRENT_AGENTLANG_VERSION}
    else
	export AGENTLANG_VERSION=${agentlang_version_in_model}
    fi
else
    export AGENTLANG_VERSION=${CURRENT_AGENTLANG_VERSION}
fi

echo "Agentlang ${AGENTLANG_VERSION}"

# Must be sha256sum
export AGENTLANG_CHECKSUM='e8cd6164f5c44c916d337d2a12b56ee7b9e13fa71153f21117cd3a5cbf4de3d1'

if [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]]; then
    delimiter=";"
else
    delimiter=":"
fi

if [[ "$OSTYPE" == "cygwin" ]]; then
  cygwin=true
else
  cygwin=false
fi

function command_not_found {
    msg "Agentlang couldn't find $1 in your \$PATH ($PATH), which is required."
    exit 1
}

function make_native_path {
    # ensure we have native paths
    if $cygwin && [[ "$1"  == /* ]]; then
    echo -n "$(cygpath -wp "$1")"
    elif [[ "$OSTYPE" == "msys" && "$1"  == /?/* ]]; then
    echo -n "$(sh -c "(cd $1 2</dev/null && pwd -W) || echo $1 | sed 's/^\\/\([a-z]\)/\\1:/g'")"
    else
    echo -n "$1"
    fi
}

#  usage : add_path PATH_VAR [PATH]...
function add_path {
    local path_var="$1"
    shift
    while [ -n "$1" ];do
        # http://bashify.com/?Useful_Techniques:Indirect_Variables:Indirect_Assignment
        if [[ -z ${!path_var} ]]; then
          export ${path_var}="$(make_native_path "$1")"
        else
          export ${path_var}="${!path_var}${delimiter}$(make_native_path "$1")"
        fi
    shift
    done
}

function download_failed_message {
    cat <<-EOS 1>&2
	Failed to download $1 (exit code $2)
	It's possible your HTTP client's certificate store does not have the
	correct certificate authority needed. This is often caused by an
	out-of-date version of libssl. It's also possible that you're behind a
	firewall and haven't set HTTP_PROXY and HTTPS_PROXY.
	EOS
}

function checksum_failed_message {
    cat <<-EOS 1>&2
	Failed to properly download $1
	The checksum was mismatched. and we could not verify the downloaded
	file. We expected a sha256 of
	$2 and actually had
	$3.
	We used '$SHASUM_CMD' to verify the downloaded file.
	EOS
}

function self_install {
  if [ -r "$AGENTLANG_JAR" ]; then
    cat <<-EOS 1>&2
	The self-install jar already exists at $AGENTLANG_JAR.
	If you wish to re-download, delete it and rerun "$0 self-install".
	EOS
    exit 1
  fi
  msg "Downloading Agentlang to $AGENTLANG_JAR now..."
  mkdir -p "$(dirname "$AGENTLANG_JAR")"
  AGENTLANG_URL="https://github.com/agentlang-io/agentlang/releases/download/$AGENTLANG_VERSION/agentlang-$AGENTLANG_VERSION-standalone.jar"
  echo "$HTTP_CLIENT $AGENTLANG_JAR.pending $AGENTLANG_URL"
  $HTTP_CLIENT "$AGENTLANG_JAR.pending" "$AGENTLANG_URL"
  local exit_code=$?
  if [ $exit_code == 0 ]; then
      printf "$AGENTLANG_CHECKSUM  $AGENTLANG_JAR.pending\n" > "$AGENTLANG_JAR.pending.shasum"
      if [ $AGENTLANG_VERSION == $CURRENT_AGENTLANG_VERSION ]; then
	  $SHASUM_CMD -c "$AGENTLANG_JAR.pending.shasum"
	  if [ $? == 0 ]; then
              mv -f "$AGENTLANG_JAR.pending" "$AGENTLANG_JAR"
	  else
              got_sum="$($SHASUM_CMD "$AGENTLANG_JAR.pending" | cut -f 1 -d ' ')"
              checksum_failed_message "$AGENTLANG_URL" "$AGENTLANG_CHECKSUM" "$got_sum"
              rm "$AGENTLANG_JAR.pending" 2> /dev/null
              exit 1
	  fi
      else
	  mv -f "$AGENTLANG_JAR.pending" "$AGENTLANG_JAR"
      fi
  else
      rm "$AGENTLANG_JAR.pending" 2> /dev/null
      download_failed_message "$AGENTLANG_URL" "$exit_code"
      exit 1
  fi
}

export AGENTLANG_HOME="${AGENTLANG_HOME:-"$HOME/.agentlang"}"

if $cygwin; then
    export AGENTLANG_HOME=$(cygpath -w "$AGENTLANG_HOME")
fi

AGENTLANG_JAR="$AGENTLANG_HOME/self-installs/agentlang-$AGENTLANG_VERSION-standalone.jar"

# normalize $0 on certain BSDs
if [ "$(dirname "$0")" = "." ]; then
    SCRIPT="$(which "$(basename "$0")")"
    if [ -z "$SCRIPT" ]; then
        SCRIPT="$0"
    fi
else
    SCRIPT="$0"
fi

# resolve symlinks to the script itself portably
while [ -h "$SCRIPT" ] ; do
    ls=$(ls -ld "$SCRIPT")
    link=$(expr "$ls" : '.*-> \(.*\)$')
    if expr "$link" : '/.*' > /dev/null; then
        SCRIPT="$link"
    else
        SCRIPT="$(dirname "$SCRIPT"$)/$link"
    fi
done

BIN_DIR="$(dirname "$SCRIPT")"

# This needs to be defined before we call HTTP_CLIENT below
if [ "$HTTP_CLIENT" = "" ]; then
    if type -p curl >/dev/null 2>&1; then
        if [ "$https_proxy" != "" ]; then
            CURL_PROXY="-x $https_proxy"
        fi
        HTTP_CLIENT="curl $CURL_PROXY -f -L -o"
    else
        HTTP_CLIENT="wget -O"
    fi
fi

# This needs to be defined before we call SHASUM_CMD below
if [ "$SHASUM_CMD" = "" ]; then
    if type -p sha256sum >/dev/null 2>&1; then
        export SHASUM_CMD="sha256sum"
    elif type -p shasum >/dev/null 2>&1; then
        export SHASUM_CMD="shasum --algorithm 256"
    else
        command_not_found sha256sum
    fi
fi

if [ ! -x "$JAVA_CMD" ] && ! type -f java >/dev/null
then
    msg "Agentlang couldn't find 'java' executable, which is required."
    msg "Please either set JAVA_CMD or put java (>=1.6) in your \$PATH ($PATH)."
    exit 1
fi

export AGENTLANG_JAVA_CMD="${AGENTLANG_JAVA_CMD:-${JAVA_CMD:-java}}"

# Handle jline issue with cygwin not propagating OSTYPE through java subprocesses: https://github.com/jline/jline2/issues/62
cygterm=false
if $cygwin; then
  case "$TERM" in
    rxvt* | xterm* | vt*) cygterm=true ;;
  esac
fi

export AGENTLANG_JVM_OPTS="${AGENTLANG_JVM_OPTS-"-XX:+TieredCompilation -XX:TieredStopAtLevel=1"}"

if $cygterm; then
  AGENTLANG_JVM_OPTS="$AGENTLANG_JVM_OPTS -Djline.terminal=jline.UnixTerminal"
  stty -icanon min 1 -echo > /dev/null 2>&1
fi

if [ "$1" = "calibrate-runtime" ]; then
    rm -rf ".runtime"
fi

present_dir=`pwd`
CALIBRATED_AGENTLANG_JAR="${present_dir}/.runtime/target/agentlang-calibrated-$AGENTLANG_VERSION-standalone.jar"

if [ -r "$CALIBRATED_AGENTLANG_JAR" ]; then
    AGENTLANG_JAR=$CALIBRATED_AGENTLANG_JAR
elif [ ! -r "$AGENTLANG_JAR" ]; then
    self_install
    rm -rf $AGENTLANG_HOME/self-installs/agentlang-lein-template
    cd $AGENTLANG_HOME/self-installs
    git clone https://github.com/agentlang-io/agentlang-lein-template.git || exit 1
    cd $AGENTLANG_HOME/self-installs/agentlang-lein-template/agentlang-model
    lein install || exit 1
    cd ${present_dir}
fi

$AGENTLANG_JAVA_CMD $AGENTLANG_JVM_OPTS -jar ${AGENTLANG_JAR} "$@"
