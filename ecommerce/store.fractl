(ns ecommerce.store
  (:require [clojure.string :as s]
            [fractl.resolver.registry :as rg]
            [fractl.resolver.core :as r]
            [fractl.component :as cn]
            [fractl.evaluator :as e])
  (:use [fractl.lang]
        [fractl.lang.datetime]
        [fractl.lang.string]))

(component :Ecommerce.Store)

(entity {:Product
         {:productId :Kernel/UUID
          :Brand :Kernel/String
          :Price :Kernel/String
          :Name :Kernel/String
          :ManufacturerName :Kernel/String
          :ManufacturerId :Kernel/UUID
          :Weight :Kernel/String}})

(entity {:StoreInfo
         {:Name         :Kernel/String
          :Location     :Kernel/String
          :StoreRatings :Kernel/Any
          :ItemsSold    :Kernel/String}})

(entity {:Inventory
         {:Shipping :Kernel/Boolean
          :Stock :Kernel/Int
          :Product {:ref :Ecommerce.Store/Product.Id}
          :Store {:ref :Ecommerce.Store/StoreInfo.Id}}})

(entity {:StoreAdmin
         {:Name            :Kernel/String
          :UserName        :Kernel/String
          :Email           :Kernel/Email
          :Password        :Kernel/Password
          :Group           {:oneof   ["admin" "member"]
                            :default "admin"}
          :ActiveSince     {:type    :Kernel/DateTime
                            :default now}}})

(entity {:Staff
         {:Name :Kernel/String
          :UserName :Kernel/String
          :Email :Kernel/Email
          :Password :Kernel/Password
          :Group {:oneof ["admin" "IT" "support"]
                  :default "admin"}}})

(dataflow :EntityRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource ["Ecommerce.Store/StoreAdmin"
                       ;"Ecommerce.Store/StoreInfo"
                       ;"Ecommerce.Store/Inventory"
                       ]
            :Rule [:q#
                   [[:Upsert]
                    [:when
                     [:= "admin" :EventContext.Auth.Owner.Group]]]]}}
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource ["Ecommerce.Store/StoreAdmin"
                       ;"Ecommerce.Store/StoreInfo"
                       ;"Ecommerce.Store/Inventory"
                       ]
            :Rule [:q#
                   [[:Lookup] [:allow-all]]]}})

(dataflow :EventRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource ["Ecommerce.Store/Upsert_StoreAdmin"
                       ;"Ecommerce.Store/Upsert_StoreInfo"
                       ]
            :Rule [:q#
                   [:when
                    [:= "admin" :EventContext.Auth.Owner.Group]]]}})

(dataflow :LoggingPolicy
          {:Kernel/Policy
           {:Intercept "Logging"
            :Resource  ["Ecommerce.Store/Upsert_StoreAdmin"
                        ;"Ecommerce.Store/Upsert_StoreInfo"
                        ]
            :Rule      [:q# {:Disable        :INFO
                             :PagerThreshold {:WARN  {:count            5
                                                      :duration-minutes 10}
                                              :ERROR {:count            3
                                                      :duration-minutes 5}}}]}})

(event {:ListAllStores {}})
;
(dataflow :ListAllStores
          :Ecommerce.Store/StoreInfo?)