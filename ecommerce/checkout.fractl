(ns ecommerce.checkout
  (:use [fractl.lang]
        [fractl.lang.datetime]
        [fractl.lang.string]))

(component :Ecommerce.Checkout)

(entity {:CheckoutLog
         {:Cart             {:ref     :Ecommerce.Cart/CartInfo.Id
                             :indexed true}
          :User             {:ref     :Ecommerce.User/UserInfo.Id
                             :indexed true}
          :ShippingDate     :Kernel/String
          :ExpectedDelivery :Kernel/String
          :ShippingCharge   :Kernel/String
          :PaymentMethod    :Kernel/String
          :IsPaid           :Kernel/Boolean
          :meta             {:unique [:User :Cart]}}})


(event {:CheckoutItem
        {:Cart          :Kernel/UUID
         :User          :Kernel/UUID
         :Membership    {:oneof   ["member" "user" "guest"]
                         :default "user"}
         :ShippingDate  :Kernel/String
         :PaymentMethod :Kernel/String
         :Backend       {:type :Kernel/String
                         :default "Postmark"}}})

(dataflow :CheckoutItem
          ;; If a user is a premium member, they will receive item the very next day.
          [:match :Ecommerce.Checkout/CheckoutItem.Membership
           "member" {:CheckoutLog {:Cart             :Ecommerce.Checkout/CheckoutItem.Cart
                                   :User             :Ecommerce.Checkout/CheckoutItem.User
                                   :ShippingDate     :Ecommerce.Checkout/CheckoutItem.ShippingDate
                                   :ShippingCharge   "Free"
                                   :ExpectedDelivery '(str (fractl.lang.datetime/add-days-to-datetime 1 :Ecommerce.Checkout/CheckoutItem.ShippingDate))
                                   :IsPaid           true
                                   :PaymentMethod    :Ecommerce.Checkout/CheckoutItem.PaymentMethod}}
           "user" {:CheckoutLog {:Cart             :Ecommerce.Cart/CheckoutItem.Cart
                                 :User             :Ecommerce.Checkout/CheckoutItem.User
                                 :ShippingDate     :Ecommerce.Checkout/CheckoutItem.ShippingDate
                                 :ShippingCharge   "200 USD"
                                 :ExpectedDelivery '(str (fractl.lang.datetime/add-days-to-datetime 3 :Ecommerce.Checkout/CheckoutItem.ShippingDate))
                                 :IsPaid           true
                                 :PaymentMethod    :Ecommerce.Checkout/CheckoutItem.PaymentMethod}}]
          {:Ecommerce.User/UserInfo {:Id? :Ecommerce.Checkout/CheckoutItem.User}}
          {:Ecommerce.Cart/CartInfo {:Id? :Ecommerce.Checkout/CheckoutItem.Cart}}
          {:Email/Push {:Receiver :Ecommerce.User/UserInfo.Email
                        :Subject  "Item Checked out!"
                        :Text     '(str "You have paid - " :Ecommerce.Cart/CartInfo.Price)}}
          {:CheckoutLog {:Cart? :Ecommerce.Checkout/CheckoutItem.Cart
                         :User? :Ecommerce.Checkout/CheckoutItem.User}})

(event {:AllCheckouts {}})

(dataflow :AllCheckouts
          :CheckoutLog?)

;; Get all shipping info.
(event {:AllShippingInaDate
        {:ShippingDate :Kernel/String}})

(dataflow :AllShippingInfo
          :CheckoutLog {:ShippingDate? :Ecommerce.Checkout/:AllShippingInaDate.ShippingDate})

(dataflow :EntityRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Ecommerce.Checkout/CheckoutLog"]
            :Rule      [:q#
                        [[:Upsert :Lookup]
                         [:when
                          [:or
                           [:= "admin" :EventContext.Auth.Owner.Group]
                           [:= "member" :EventContext.Auth.Owner.Group]]]]]}})

(dataflow :EventRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Ecommerce.Checkout/CheckoutItem"]
            :Rule      [:q#
                        [:when
                         [:= "member" :EventContext.Auth.Owner.Group]]]}})

(dataflow :LoggingPolicy
          {:Kernel/Policy
           {:Intercept "Logging"
            :Resource  ["Ecommerce.Checkout/CheckoutItem"]
            :Rule      [:q# {:Disable        :INFO
                             :PagerThreshold {:WARN  {:count            5
                                                      :duration-minutes 10}
                                              :ERROR {:count            3
                                                      :duration-minutes 5}}}]}})