(ns ecommerce.application
  (:require [clojure.string :as s]
            [fractl.resolver.registry :as rg]
            [fractl.resolver.core :as r]
            [fractl.component :as cn]
            [fractl.evaluator :as e])
  (:use [fractl.lang]
        [fractl.lang.datetime]
        [fractl.lang.string]))

(component :Ecommerce.Application)


(entity {:CheckoutLog
         {:Cart {:ref :Ecommerce.Cart/CartInfo.Id
                 :indexed true}
          :User {:ref :Ecommerce.User/UserInfo.Id
                 :indexed true}
          :ShippingDate :Kernel/String
          :ExpectedDelivery :Kernel/String
          :ShippingCharge :Kernel/String
          :PaymentMethod :Kernel/String
          :IsPaid :Kernel/Boolean
          :meta {:unique [:User :Cart]}}})


(event {:CheckoutItem
        {:Cart             :Kernel/UUID
         :User             :Kernel/UUID
         :Membership       {:oneof   ["member" "user" "guest"]
                            :default "user"}
         :ShippingDate     :Kernel/String
         ;:ExpectedDelivery :Kernel/String
         :PaymentMethod    :Kernel/String
         ;:Backend          :Kernel/String
         ;:Receiver         :Kernel/String
         ;:Subject          :Kernel/String
         ;:Text             :Kernel/String
         ;:To               :Kernel/String
         }})

(dataflow :CheckoutItem
          ;; If a user is a premium member, they will receive item the very next day.
          [:match :Ecommerce.Application/CheckoutItem.Membership
           "member" {:CheckoutLog {:Cart             :Ecommerce.Cart/CheckoutItem.Cart
                                   :User             :Ecommerce.Application/CheckoutItem.User
                                   :ShippingDate     :Ecommerce.Application/CheckoutItem.ShippingDate
                                   :ShippingCharge   "Free"
                                   :ExpectedDelivery '(str (fractl.lang.datetime/add-days-to-datetime 1 :Ecommerce.Application/CheckoutItem.ShippingDate))
                                   :IsPaid           true
                                   :PaymentMethod    :Ecommerce.Application/CheckoutItem.PaymentMethod}}
           "user" {:CheckoutLog {:Cart             :Ecommerce.Cart/CheckoutItem.Cart
                                 :User             :Ecommerce.Application/CheckoutItem.User
                                 :ShippingDate     :Ecommerce.Application/CheckoutItem.ShippingDate
                                 :ShippingCharge   "200 USD"
                                 :ExpectedDelivery '(str (fractl.lang.datetime/add-days-to-datetime 3 :Ecommerce.Application/CheckoutItem.ShippingDate))
                                 :IsPaid           true
                                 :PaymentMethod    :Ecommerce.Application/CheckoutItem.PaymentMethod}}]
          #_{:Email/Push {:Backend :Ecommerce.Application/CheckoutItem.Backend
                        :Receiver :Ecommerce.Application/CheckoutItem.Receiver
                        :Subject :Ecommerce.Application/CheckoutItem.Subject
                        :Text :Ecommerce.Application/CheckoutItem.Text}}
          #_{:Sms/Push {:To :Ecommerce.Application/CheckoutItem.To
                      :Body :Ecommerce.Application/CheckoutItem.Text}}
          {:CheckoutLog {:Cart? :Ecommerce.Application/CheckoutItem.Cart
                         :User? :Ecommerce.Application/CheckoutItem.User}})

(event {:AllCheckouts {}})

(dataflow :AllCheckouts
          :CheckoutLog?)

;; Get all shipping info.
#_(event {:AllShippingInfo
        {:ShippingDate :Kernel/String}})

#_(dataflow :AllShippingInfo
          :CheckoutLog {ShippingDate :Ecommerce.Application/AllShippingInfo.ShippingDate})

;;TODO: Show logistics info for Store Owners and manage logistics.

(dataflow :EntityRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Ecommerce.Application/CheckoutLog"]
            :Rule      [:q#
                        [[:Upsert :Lookup]
                         [:when
                          [:or
                           [:= "admin" :EventContext.Auth.Owner.Group]
                           [:= "member" :EventContext.Auth.Owner.Group]]]]]}})

(dataflow :EventRBAC
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Ecommerce.Application/CheckoutItem"]
            :Rule      [:q#
                        [:when
                         [:= "member" :EventContext.Auth.Owner.Group]]]}})

(dataflow :LoggingPolicy
          {:Kernel/Policy
           {:Intercept "Logging"
            :Resource  ["Ecommerce.Application/CheckoutItem"]
            :Rule      [:q# {:Disable        :INFO
                             :PagerThreshold {:WARN  {:count            5
                                                      :duration-minutes 10}
                                              :ERROR {:count            3
                                                      :duration-minutes 5}}}]}})