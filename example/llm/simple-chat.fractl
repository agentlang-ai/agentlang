(component :SimpleChat)

(inference
 :TellAJoke
 {:agent "agent01"})

(dataflow
 :InitJokeAgent
 [:agent
  {:Name "agent01"
   :Type "chat"
   :with-llm "llm01"
   :with-messages [:q# [{:role :system :content "I am an AI bot who tell jokes"}]]}])

(inference :TellAJoke {:agent "agent01"})
;; POST api/SimpleChat/TellAJoke
;; {"SimpleChat/TellAJoke": {"UserInstruction": "OK, tell me a joke about AGI?"}}

(dataflow
 :InitSupportAgent
 [:agent
  {:Name "agent02"
   :Type "chat"
   :with-llm "llm01"
   :with-messages
   [:q# [{:role :system
          :content (str "You are a support agent for Photographers."
                        "Please use the documentation from the appropriate "
                        "camera manufacturer to answer user queries.")}]]
   :with-documents ["example/llm/docs/panasonic_lumix.md"
                    "example/llm/docs/canon.md"]}])

(inference :CameraSupport {:agent "agent02"})
;; POST api/SimpleChat/CameraSupport
;; {"SimpleChat/CameraSupport": {"UserInstruction": "How to adjust white balance on my Panasonic G9?"}}

(dataflow
 :InitChainOfThoughtAgent
 [:agent
  {:Name "agent03"
   :Type "chat"
   :with-llm "llm01"
   :with-messages
   [:q# [{:role :system
          :content (str "You are an agent who answer user queries by taking advantage of "
                        "a chain-of-thought. That means, you will take a step-by-step approach "
                        "in your response, cite sources and give reasoning before sharing final answer "
                        "in the below format: ANSWER is: <name>")}]]}])

(defn process-chained-response [[s _]]
  (let [pat "ANSWER is: "
        idx (clojure.string/index-of s pat)
        answer (if idx (subs s (+ idx (count pat))) "<invalid-response-from-llm>")]
    {:answer answer
     :steps (clojure.string/split-lines s)}))

(inference :ChainOfThoughtExample {:agent "agent03" :with-response-handler process-chained-response})
;; Example:
;; POST api/SimpleChat/ChainOfThoughtExample
;; {"SimpleChat/ChainOfThoughtExample":
;;     {"UserInstruction": "Who was the most decorated (maximum medals)
;; individual athlete in the Olympic games that were held at Sydney?"}}

(dataflow
 :AgentCompositionExample
 [:agent
  {:Name? "agent03"
   :UserInstruction :AgentCompositionExample.Instruction
   :Context :AgentCompositionExample}
  :as [:Agent1]]
 [:invoke :Agent1]
 [:agent
  {:Name "agent04"
   :UserInstruction '(str "The query posted to the other agent was: " :AgentCompositionExample.Instruction ". "
                          "It responded with this text: " :Agent1.Response
                          "Please analyse it and provide your conclusion.")
   :Context :AgentCompositionExample
   :Type "chat"
   :with-llm "llm01"
   :with-messages [:q# [{:role :system
                         :content (str "You are an agent who verifies the answer returned by another agent. "
                                       "Analyse the chain-of-thought returned by the other agent and return YES "
                                       "if its conlusion is correct. Otherwise return NO. The final answer will be "
                                       "encoded by the other agent as - ANSWER is: <some-text>")}]]}
  :as :Agent2]
 [:invoke :Agent2])
;; Usage:
;; POST api/SimpleChat/AgentCompositionExample
;; {"SimpleChat/AgentCompositionExample":
;;  {"Instruction": "Who was the most decorated (maximum medals) individual athlete in the Olympic games that were held at Sydney?"}}

(dataflow
 :Fractl.Kernel.Lang/AppInit
 {:Fractl.Inference.Provider/LLM
  {:Type "openai"
   :Name "llm01"
   :Config {:ApiKey (fractl.util/getenv "OPENAI_API_KEY")
            :EmbeddingApiEndpoint "https://api.openai.com/v1/embeddings"
            :EmbeddingModel "text-embedding-3-small"
            :CompletionApiEndpoint "https://api.openai.com/v1/chat/completions"
            :CompletionModel "gpt-3.5-turbo"}}}
 [:try [:agent {:Name? "agent01"}] :not-found {:InitJokeAgent {}}]
 [:try [:agent {:Name? "agent02"}] :not-found {:InitSupportAgent {}}]
 [:try [:agent {:Name? "agent03"}] :not-found {:InitChainOfThoughtAgent {}}])
