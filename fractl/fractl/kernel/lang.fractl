(component
 :Fractl.Kernel.Lang
 {:clj-import '[(:require [fractl.util :as u]
                          [fractl.lang.kernel :as k]
                          [fractl.lang.internal :as li]
                          [fractl.lang.datetime :as dt]
                          [fractl.resolver.registry :as r]
                          [fractl.component :as cn])]})

(attribute :String {:check k/kernel-string?})
(attribute :Keyword {:check #(or (keyword? %) (string? %))})
(attribute :Path {:check k/path?})
(attribute :DateTime {:check k/date-time?})
(attribute :Date {:check k/date?})
(attribute :Time {:check k/time?})
(attribute :UUID {:check k/UUID?})
(attribute :Int {:check int?})
(attribute :Int64 {:check int?})
(attribute :BigInteger {:check integer?})
(attribute :Float {:check k/kernel-float?})
(attribute :Double {:check k/kernel-double?})
(attribute :Decimal {:check cn/decimal-value?})
(attribute :Boolean {:check boolean?})
(attribute :Record {:check cn/record-instance?})
(attribute :Entity {:check cn/entity-instance?})
(attribute :Event {:check cn/event-instance?})
(attribute :Any {:check k/any-obj?})
(attribute :Email {:check k/email?})
(attribute :Map {:check map?})
(attribute :Edn {:check k/edn?})

(attribute :Identity {:type :UUID :default u/uuid-string li/guid true})
(attribute :Now {:type :DateTime :default dt/now})

(attribute (k/event-context-attribute-name)
           (k/event-context-attribute-schema))

(attribute
 :Password
 {:type :String
  :secure-hash true})

(record
 :Future
 {:Result :Any
  :TimeoutMillis {:type :Int
                  :default 2000}})

(entity
 :Policy
 {:Intercept {:type :Keyword
              :indexed true}
  :Resource {:type :Path
             :indexed true}
  :Spec :Edn
  :InterceptStage
  {:oneof [:PreEval :PostEval :Default]
   :default :Default}})

(entity
 :Timer
 {:Expiry :Int
  :ExpiryUnit {:oneof [:Seconds :Minutes :Hours :Days]
               :default :Seconds}
  :ExpiryEvent :Map
  ;; :TaskHandle is set by the runtime, represents the
  ;; thread that execute the event after timer expiry.
  :TaskHandle {:type :Any :optional true}})

(dataflow
 :LoadPolicies
 {:Policy
  {:Intercept? :LoadPolicies.Intercept
   :Resource? :LoadPolicies.Resource}})

(event
 :AppInit
 {:Data :Map})

(event
 :InitConfig
 {})

(record
 :InitConfigResult
 {:Data {:listof :Fractl.Kernel.Lang/Map}})

(record
 :DataSource
 {:Uri {:type :String
        :optional true} ;; defaults to currently active store
  :Entity :String ;; name of an entity
  :AttributeMapping {:type :Map
                     :optional true}})

(event
 :DataSync
 {:Source :DataSource
  :DestinationUri {:type :String
                   :optional true}})

(r/register-resolvers
 [{:name :meta
   :type :meta
   :compose? false
   :config {:fractl-api
            {:component component
             :entity entity
             :event event
             :record record
             :dataflow dataflow}}
   :paths [:Fractl.Kernel.Lang/LoadModelFromMeta]}
  {:name :timer
   :type :timer
   :compose? false
   :paths [:Fractl.Kernel.Lang/Timer]}
  (when (u/host-is-jvm?)
    {:name :data-sync
     :type :data-sync
     :compose? false
     :paths [:Fractl.Kernel.Lang/DataSync]})])
