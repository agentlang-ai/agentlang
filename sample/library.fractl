;; Captures a library of books model

(ns sample.library
  (:use [fractl.lang]))

(component :Sample.Library)

(def max-borrow-days 14)
(defn valid-title? [s] (> (.length s) 1))
(defn is-adult? [a] (and (int? a) (>= a 18)))
(defn is-allowed-to-borrow? [a] (and (int? a) (>= a 12)))

(attribute :Title valid-title?)
(attribute :Name string?)
(attribute :Publisher string?)
(attribute :Age is-adult?)
(attribute :AgeBorrower is-allowed-to-borrow?)
(attribute :Gender (fn [x] (some #{x} ["Male" "Female"])))
(attribute :Timestamp int?)
(attribute :FineAmount float?)

;; Represents a Borrower (Customer)
(entity {:Customer {:Name :Name
                    :Age :AgeBorrower
                    :Gender :Gender}})

;; Represents an Author
(entity {:Author {:Name :Name
                  :Age :Age
                  :Gender :Gender}})

;; Represents a Book
(entity {:Book {:Author        {:ref :Author.Id}
                :AuthorGender :Author.Gender
                :Title :Title
                :Publisher :Publisher}})

(record {:RentedBook {:Book :Book.Id
                      :Customer :Customer.Id
                      :RentedAt :Timestamp}})

(attribute :BookList {:listof :Book.Id})
(attribute :RentedBookList {:listof :RentedBook})

;; Represents a library
(entity {:Library {:Name :Name
                   :Books :BookList
                   :Ledger :RentedBookList}})

(record {:Charges {:Customer :Customer.Id
                   :FineAmount :FineAmount}})

;; Support functions for dataflow
(defn now [] (System/currentTimeMillis))

(def max-borrow-millis (* max-borrow-days 86400000))

(defn checkout-book [books book-id]
  (let [predic (partial = book-id)]
    (if (some predic books)
      (remove predic books)
      (throw (Exception. (str "Book is not available for checkout - " book-id))))))

(defn checkin-book [books book-id]
  (let [predic (partial = book-id)]
    (if (some predic books)
      (throw (Exception.(str "Book is not checked-out - " book-id)))
      (conj books book-id))))


(event {:RentBookToCustomer
        {:Customer :Customer.Id
         :Book :Book.Id
         :Library :Library.Id}})

(event {:ReturnBookToLibrary
        {:Customer :Customer.Id
         :Book :Book.Id
         :Library :Library.Id}})
            
(dataflow {:RentBookToCustomer {:Library libid :Book book :Customer customer}}
          {:Library {:Id? libid
                     ;:Books (checkout-book :Library.Books 'book)
                     ;:Ledger (add-book-to-ledger :Library.Ledger book customer)
                     }}
          {:Charges {:Customer customer}}
          ;book
          )