(ns fractl.client.model.blog
  (:require [fractl.lang :refer
             [component entity
              record event dataflow]]
            [fractl.component :as cn]
            [fractl.lang.datetime :refer [now]]))

(component :Sample.Blog)

(entity
 :Sample.Blog/User
 {:UserName {:type :Kernel/String
             :indexed true}
  :Password :Kernel/Password
  :DOB {:type :Kernel/String
        :format "^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$"}
  :Sex {:oneof ["M" "F"]}
  :Email :Kernel/Email
  :meta
  {:str :UserName
   :order [:UserName :Password :Email :DOB :Sex]}})

(dataflow
 :Sample.Blog/UserLookupAll
 {:Sample.Blog/User
  {cn/q-id-attr (cn/append-id :Sample.Blog/BlogEntryLookupAll.EventContext.User)}})

(event
 :Sample.Blog/UserLogin
 {:UserName :Kernel/String
  :Password :Kernel/Password
  :meta
  {:str :UserName
   :order [:UserName :Password]
   :views {:create-button
           {:label "Login"
            :on-success :authorize}}}})

(dataflow
 :Sample.Blog/UserLogin
 {:Sample.Blog/User
  {:UserName? :Sample.Blog/UserLogin.UserName}}
 [:match :Sample.Blog/UserLogin.Password
  :Sample.Blog/User.Password :Sample.Blog/User])

(defn valid-blog-title? [s]
  (and (string? s)
       (< 10 (count s) 100)))

(defn valid-blog-content? [s]
  (and (string? s)
       (< 10 (count s) 2000)))

(def ^:private content-input-spec
  [:> :TextareaAutosize
   {:max-rows 20
    :aria-label "maximum height"
    :placeholder "Maximum 2000 characters"
    :default-value "blog content"
    :style {:width 200}}])

(entity
 :Sample.Blog/BlogEntry
 {:CreatedBy {:ref (cn/append-id :Sample.Blog/User)
              :indexed true}
  :DateCreated {:type :Kernel/String
                :default now}
  :Title {:check valid-blog-title?}
  :Content {:check valid-blog-content?}
  :meta
  {:str :Title
   :order [cn/id-attr :Title :Content :CreatedBy :DateCreated]
   :views
   {:contains [:Sample.Blog/Comment]
    :attributes
    {:Content {:input content-input-spec}}}}})

(record :Sample.Blog/DisplayBlog {})

(defn valid-comment? [s]
  (and (string? s)
       (< 10 (count s) 500)))

(entity
 :Sample.Blog/Comment
 {:CreatedBy {:ref (cn/append-id :Sample.Blog/User)
              :indexed true}
  :BlogEntry {:ref (cn/append-id :Sample.Blog/BlogEntry)
              :indexed true}
  :DateCreated {:type :Kernel/String
                :default now}
  :Content {:check valid-comment?}
  :meta
  {:str :BlogEntry
   :order [:BlogEntry :CreatedBy :DateCreated :Content]
   :views {:contains [:Sample.Blog/CommentModerate]}}})

(entity
 :Sample.Blog/CommentModerate
 {:Comment {:ref (cn/append-id :Sample.Blog/Comment)
            :indexed true}
  :Status :Kernel/String
  :meta {:order [:Comment :Status]}})

(dataflow
 :Sample.Blog/CommentModerateLookupByComment
 {:Sample.Blog/CommentModerate
  {:Comment? :Sample.Blog/CommentModerateLookupByComment.Comment}})

(dataflow
 :Sample.Blog/CommentModerateLookupAll
 {:Sample.Blog/CommentModerate
  {:Comment? (cn/append-id :Sample.Blog/CommentModerateLookupAll.EventContext.Comment)}})

(dataflow
 :Sample.Blog/CommentLookupByBlogEntry
 {:Sample.Blog/Comment {:BlogEntry? :Sample.Blog/CommentLookupByBlogEntry.BlogEntry}})

(dataflow
 :Sample.Blog/CommentLookupByBlogEntryAndComment
 {:Sample.Blog/Comment
  {:BlogEntry? :Sample.Blog/CommentLookupByBlogEntryAndComment.BlogEntry
   cn/q-id-attr :Sample.Blog/CommentLookupByBlogEntryAndComment.Comment}})

(dataflow
 :Sample.Blog/BlogEntryLookupAll
 {:Sample.Blog/BlogEntry
  {:CreatedBy? (cn/append-id :Sample.Blog/BlogEntryLookupAll.EventContext.User)}})

(dataflow
 :Sample.Blog/CommentLookupAll
 {:Sample.Blog/Comment
  {:BlogEntry? (cn/append-id :Sample.Blog/CommentLookupAll.EventContext.BlogEntry)}})

(dataflow
 :Kernel/AppInit
 {:Sample.Blog/User
  {:UserName "admin"
  :Password "admin"
  :DOB "1970-01-01"
  :Sex "M"
  :Email "admin@blog.com"}})
