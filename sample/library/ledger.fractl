(ns sample.library.ledger
  "Manage a list of books in the library"
  (:use [fractl.lang]
        [fractl.lang.datetime]
        [fractl.lang.string]
        [fractl.lang.b64])
  (:require [fractl.component :as cn]))

(component :Sample.Library.Ledger)

(entity {:Sample.Library.Ledger/CheckoutLog
         {:Member       {:ref     (cn/append-id :Sample.Library.Identity/Member)
                         :indexed true}
          :Designation  :Kernel/String
          :Book         {:ref     (cn/append-id :Sample.Library.Catalog/Book)
                         :indexed true}
          :IsCheckedout {:type    :Kernel/Boolean
                         :default true}
          :CheckoutDate {:type    :Kernel/DateTime
                         :default now}
          :ReturnDate   {:type     :Kernel/DateTime
                         :optional true}
          :meta         {:unique [:Member :Book]}}})

(entity {:Kernel/Authentication
         {:Owner         :Kernel/Any
          :Issued        {:type :Kernel/DateTime :optional true}
          :ExpirySeconds {:type :Kernel/Int :default 300}}})

(dataflow :Sample.Library.Ledger/MemberLogin
          {:Sample.Library.Identity/Member {:UserName? :Sample.Library.Ledger/MemberLogin.UserName}}
          [:match :Sample.Library.Identity/Member.Password
           :Sample.Library.Ledger/MemberLogin.Password  {:Kernel/Authentication {:Owner :Sample.Library.Identity/Member}}])

(dataflow :Sample.Library.Ledger/UserLogin
          {:Sample.Library.Identity/User {:UserName? :Sample.Library.Ledger/UserLogin.UserName}}
          [:match :Sample.Library.Identity/User.Password
           :Sample.Library.Ledger/UserLogin.Password  {:Kernel/Authentication {:Owner :Sample.Library.Identity/User}}])

(event {:Sample.Library.Ledger/CheckoutBook
        {:Member   :Kernel/UUID
         :Designation :Kernel/String
         :Book     :Kernel/UUID
         :Backend  :Kernel/String
         :Receiver :Kernel/String
         :Subject  :Kernel/String
         :Text     :Kernel/String
         :To       :Kernel/String}})

(dataflow :Sample.Library.Ledger/CheckoutBook
          {:Sample.Library.Ledger/CheckoutLog {:Member       :Sample.Library.Ledger/CheckoutBook.Member
                                               :Designation  :Sample.Library.Ledger/CheckoutBook.Designation
                                               :Book         :Sample.Library.Ledger/CheckoutBook.Book
                                               :IsCheckedout true}}
          #_{:Email/Push {:Backend  :Sample.Library.Ledger/CheckoutBook.Backend
                          :Receiver :Sample.Library.Ledger/CheckoutBook.Receiver
                          :Subject  :Sample.Library.Ledger/CheckoutBook.Subject
                          :Text     :Sample.Library.Ledger/CheckoutBook.Text}}
          #_{:Sms/Push {:To   :Sample.Library.Ledger/CheckoutBook.To
                        :Body :Sample.Library.Ledger/CheckoutBook.Text}}
          {:Sample.Library.Ledger/CheckoutLog {:Member? :Sample.Library.Ledger/CheckoutBook.Member
                                               :Book?   :Sample.Library.Ledger/CheckoutBook.Book}})

(event {:Sample.Library.Ledger/CheckinBook
        {:Member   :Kernel/UUID
         :Designation :Kernel/String
         :Book     :Kernel/UUID
         :Backend  :Kernel/String
         :Receiver :Kernel/String
         :Subject  :Kernel/String
         :Text     :Kernel/String
         :To       :Kernel/String}})

(dataflow :Sample.Library.Ledger/CheckinBook
          {:Sample.Library.Ledger/CheckoutLog {:Member       :Sample.Library.Ledger/CheckinBook.Member
                                               :Designation   :Sample.Library.Ledger/CheckinBook.Designation
                                               :Book         :Sample.Library.Ledger/CheckinBook.Book
                                               :IsCheckedout false}}
          #_{:Email/Push {:Backend  :Sample.Library.Ledger/CheckoutBook.Backend
                        :Receiver :Sample.Library.Ledger/CheckoutBook.Receiver
                        :Subject  :Sample.Library.Ledger/CheckoutBook.Subject
                        :Text     :Sample.Library.Ledger/CheckoutBook.Text}}
          #_{:Sms/Push {:To   :Sample.Library.Ledger/CheckoutBook.To
                      :Body :Sample.Library.Ledger/CheckoutBook.Text}}
          {:CheckoutLog {:Member? :Sample.Library.Ledger/CheckinBook.Member
                         :Book?   :Sample.Library.Ledger/CheckinBook.Book}})

(event {:CheckedoutBooks
        {:Member :Kernel/UUID}})

(dataflow :CheckedoutBooks
          {:CheckoutLog {:Member? :Sample.Library.Ledger/CheckedoutBooks.Member}})

(event {:CheckedoutBy
        {:Book :Kernel/UUID}})

(dataflow :CheckedoutBy
          {:CheckoutLog {:Book? :Sample.Library.Ledger/CheckedoutBy.Book}}
          [:match :CheckoutLog.IsCheckedout
           true :CheckoutLog])

(event {:AllCheckouts {}})

(dataflow :AllCheckouts
          :CheckoutLog?)

(dataflow :ServicePolicy
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Sample.Library.Identity/Upsert_Member"]
            :Spec      [:q#
                        [:when
                         [:in ["life" "individual" "family"
                               "remote" "oversees" "supported" "associate"]
                          :EventContext.Auth.Owner.Designation]]]}})

(dataflow :UserCreationPolicy
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Sample.Library.Identity/Upsert_User"]
            :Spec      [:q#
                        [:when
                         [:= "incharge" :EventContext.Auth.Owner.Designation]]]}})

(dataflow :CheckoutPolicy
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Sample.Library.Ledger/CheckoutBook"]
            :Spec      [:q#
                        [:when
                         [:in ["life" "individual" "family"
                               "remote" "oversees" "supported" "associate"]
                          :EventContext.Auth.Owner.Designation]]]}})

(dataflow :CheckinPolicy
          {:Kernel/Policy
           {:Intercept "RBAC"
            :Resource  ["Sample.Library.Ledger/CheckinBook"]
            :Spec      [:q#
                        [:when
                         [:in ["life" "individual" "family"
                               "remote" "oversees" "supported" "associate"]
                          :EventContext.Auth.Owner.Designation]]]}})

(dataflow :RBACPolicyLogging
          {:Kernel/Policy
           {:Intercept "Logging"
            :Resource  ["Sample.Library.Ledger/CheckoutBook"
                        "Sample.Library.Ledger/CheckinBook"
                        "Sample.Library.Identity/Upsert_Member"
                        "Sample.Library.Identity/Upsert_User"]
            :Spec      [:q# {:Disable        :INFO
                             :PagerThreshold {:WARN  {:count            5
                                                      :duration-minutes 10}
                                              :ERROR {:count            3
                                                      :duration-minutes 5}}}]}})


