(ns sample.accounts
  (:require [fractl.lang
             :refer [component attribute event
                     entity record relationship dataflow]]
            [fractl.lang.datetime :as dt]))

(component :Acme.Accounting)

(entity
 :Acme.Accounting/Account
 {:Title {:type :Kernel/String
          :indexed true
          :unique true}
  :meta
  {:str :Title
   :views
   {:input :Acme.Accounting/AccountInputForm
    :display :Acme.Accounting/AccountDisplayForm
    :list :Acme.Accounting/AccountsList}}})

(dataflow
 :Acme.Accounting/AccountInputForm
 {:Fractl.UI/InputForm
  {:Record "Acme.Accounting/Account"
   :Fields ["Title"]}})

(dataflow
 :Acme.Accounting/AccountDisplayForm
 {:Fractl.UI/InputForm
  {:Record "Acme.Accounting/Account"
   :Fields ["Title"]
   :QueryBy :Acme.Accounting/AccountDisplayForm.QueryBy
   :QueryValue :Acme.Accounting/AccountDisplayForm.QueryValue}})

(dataflow
 :Acme.Accounting/AccountsList
 {:Fractl.UI/Table
  {:Record "Acme.Accounting/Account"
   :Source "Acme.Accounting/QueryAllAccounts"
   :Fields ["Title"]}})

(dataflow
 :Acme.Accounting/QueryAllAccounts
 {:Acme.Accounting/Account? {}})

(dataflow
 :Acme.Accounting/LookupAccountByTitle
 {:Acme.Accounting/Account
  {:Title? [:like :Acme.Accounting/LookupAccountByTitle.S]}})

(relationship
 :Acme.Accounting/Transaction
 {:Date {:type :Kernel/DateTime
         :default dt/now}
  :Debit {:ref :Acme.Accounting/Account.Id}
  :Credit {:ref :Acme.Accounting/Account.Id}
  :Amount :Kernel/Decimal
  :meta
  {:from :Debit
   :to :Credit
   :list {:Debit :Acme.Accounting/QueryAllAccounts
          :Credit :Acme.Accounting/QueryAllAccounts}
   :cardinality
   {:type :1-1
    :exclusive false}
   :views
   {:input :Acme.Accounting/TransactionInputForm
    :list :Acme.Accounting/TransactionsList}}})

(dataflow
 :Acme.Accounting/TransactionInputForm
 {:Fractl.UI/InputForm
  {:Record "Acme.Accounting/Transaction"
   :Fields ["Date" "Debit" "Credit" "Amount"]}})

(dataflow
 :Acme.Accounting/TransactionsList
 {:Fractl.UI/Table
  {:Record "Acme.Accounting/Transaction"
   :Source "Acme.Accounting/QueryTransactions"
   :Fields ["Date" "Debit" "Credit" "Amount"]}})

(dataflow
 :Acme.Accounting/QueryTransactions
 {:Acme.Accounting/Transaction? {}}) ; TODO: filter by account-id
